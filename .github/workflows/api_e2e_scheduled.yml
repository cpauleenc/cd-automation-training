# GitHub Actions
# https://help.github.com/en/articles/configuring-a-workflow
name: cd-automation-scheduled

on:
  schedule:
    # Run test Sun-Fri every 7am
    - cron: '0 23 * * SUN-FRI'

jobs:
  test1:
    name: Cypress test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

    # install a specific version of Node using
    # https://github.com/actions/setup-node
    - name: Use Node.js v14
      uses: actions/setup-node@v1
      with:
        node-version: "14"

    # just so we learn about available environment variables GitHub provides
    - name: Print env variables
      run: |
        npm i -g @bahmutov/print-env
        print-env GITHUB
    # Restore the previous NPM modules and Cypress binary archives.
    # Any updated archives will be saved automatically after the entire
    # workflow successfully finishes.
    # See https://github.com/actions/cache
    - name: Cache node modules
      uses: actions/cache@v1
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Cache Cypress binary
      uses: actions/cache@v1
      with:
        path: ~/.cache/Cypress
        key: cypress-${{ runner.os }}-cypress-${{ hashFiles('**/package.json') }}
        restore-keys: |
          cypress-${{ runner.os }}-cypress-
    - name: install dependencies and verify Cypress
      env:
        # make sure every Cypress install prints minimal information
        CI: 1
      # print Cypress and OS info
      run: |
        npm ci
        npx cypress verify
        npx cypress info
        npx cypress version
        npx cypress version --component package
        npx cypress version --component binary
        npx cypress version --component electron
        npx cypress version --component node

    # Run tests
    - name: Cypress run
      run: |
        npx cypress run --spec 'cypress/e2e/${{ github.event.inputs.test_file }}' --env allure=true 
      continue-on-error: false
    
    # Allure  report
    - name: Get Allure history
      if: always()
      uses: actions/checkout@v2
      continue-on-error: true
      with:
        ref: allure-reports
        path: allure-reports

    - name: Allure reports
      if: always()
      uses: gigimon/allure-report-action@master
      with:
        allure_results: allure-results
        allure_history: allure-history
        gh_pages: allure-reports
        keep_reports: 350

    - name: Deploy report to Github Pages
      if: always()
      uses: peaceiris/actions-gh-pages@v2
      env:
        PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        PUBLISH_BRANCH: allure-reports
        PUBLISH_DIR: allure-history
      
    # Send API Automation result to Slack
    - name: Send automation report on slack channel
      if: always()
      uses: rtCamp/action-slack-notify@v2.2.0
      env:
        SLACK_CHANNEL: cd-test-automation-results
        SLACK_USERNAME: CD Automation Reports
        SLACK_MESSAGE: Please see test results here https://expert-broccoli-3a7af9cb.pages.github.io/${{ github.run_number }}/
        SLACK_COLOR: ${{ job.status }}
        SLACK_ICON: "https://ibb.co/GTkvpjP"
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  